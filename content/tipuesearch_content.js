var tipuesearch = {"pages": [{'title': 'About', 'text': '成員:張昱棠(41023153)，王翔楷(41023113) \n 倉儲: https://github.com/mdecd2023/2a-pj1ag14 \xa0 \n 網站: https://mdecd2023.github.io/2a-pj1ag14 \xa0\xa0 \n', 'tags': '', 'url': 'About.html'}, {'title': 'w3', 'text': 'w3 - 2023.03.10.16 已經完成分組網頁者, 可以得到分組網頁評分 \n w3 - 請各組寫一個程式判定 2a 哪一組已經完成網頁建置. \n w3 開始執行 \xa0 https://mde.tw/pjcopsim/content/bubbleRobTutorial.html \n \n 課程內容:創建以及了解如何共同維護團隊的倉儲 \n 心得:在我們剛創建倉儲時不小心把倉儲Fork至我們個人的github倉儲下了，導致老師那邊的團隊倉儲連線不到我們更改的網站以及倉儲，再詢問老師時，老師以非常好理解的方式講解給我們理解，並讓我們理解了哪一步做錯了，老師也以引導的方式讓我們慢慢理解該如何解決，並告訴我們日後該如何與組員達到協同設計， \n \n', 'tags': '', 'url': 'w3.html'}, {'title': '張昱棠41023153心得', 'text': '張昱棠:由於上學期的usb隨身倉儲故障了，這學期用了一顆新的隨身碟，在一開始建立團隊倉儲acp時，發現新的隨身系統並未綁定github帳戶導致無法推送，綁定完後開始建立團隊的共同倉儲，發現我們共同倉儲由於不小心fork到我們的個人github下，導致無法連線至老師的團體倉儲後詢問老師問題，並且與組員及同學一起討論並且解決成功連線上。 \n \n \n', 'tags': '', 'url': '張昱棠41023153心得.html'}, {'title': '王翔楷41023113心得', 'text': '王翔楷:雖然先前在嚴老師的課上常常與同學共同討論課程內容 ，這是首次要跟同學合作，建立共同倉儲，雖然剛開始弄得不是很順利，但最後藉著詢問老師，並且與同學共同討論後成功連上 。 \n', 'tags': '', 'url': '王翔楷41023113心得.html'}, {'title': 'tutorial1', 'text': 'ag14 tutorial presentation \n \n \n \n \n bubbleRob本體 \n slider \n wheels \n \n \n \n \n \n \n', 'tags': '', 'url': 'tutorial1.html'}, {'title': '心得', 'text': '\n 張昱棠: \n 我們在製作過程中遇到了相當多的問題，光語言的部分我們就開了一個翻譯的網頁在旁邊一起配著原文版看，在一開始時，有點不太理解調整數值是必須輸入註解內的數值還是本文內的，導致數值有些輸入錯誤，在一連串的錯誤後，我們果斷選擇，直接開一個新檔案重做，由於當天我們留在學校做，大概從七點開始一路錯誤重來錯誤重來到快凌晨一點才回家，終於在隔天成功做出結果來了，在學習coppeliasim 的部分，接續上學期學到的在這學期應用，並且學習了許多新的知識 \n 王翔楷: \n 製作初期其實並不順利，我們這組和另外兩個同學一起從七點弄到凌晨一點才回家，過程中最難克服的是對軟體的不熟悉，隔天利用下午沒課的時間慢慢摸索，最後才順利完成建置，再利用晚上上課的時間向老師請教感測器內部程式的問題後回到座位上研究，最後才順利完成功課。 \n \n', 'tags': '', 'url': '心得.html'}, {'title': '問題', 'text': '1. coppeliasim中的scene與model有何不同? \n 在CoppeliaSim中，Scene是一個包含多個物理仿真模型和其他環境元素（例如燈光、相機、傳感器等）的虛擬環境。這些模型可以是機器人、機械臂、傳送帶、機場跑道等等。 Scene通常用於仿真應用程序的開發和測試。而Model是CoppeliaSim中的一個概念，是一種可以單獨保存的物理仿真模型，可以將其作為場景中的組成部分進行導入和編輯。 Model包含一個或多個物體，例如一個機器人、一個傳感器、一個關節等等。 Model可以在場景中多次使用，也可以在不同場景之間共享。簡而言之，Scene是包含多個物理仿真模型和其他環境元素的虛擬環境，而Model是可以單獨保存的物理仿真模型，可以在不同場景中共享使用。 \n 整理: \n Scene:是一個包含多個物理仿真模型和其他環境元素（例如燈光、相機、傳感器等）的虛擬環境，Scene通常用於仿真應用程序的開發和測試 model:是一種可以單獨保存的物理仿真模型，可以將其作為場景中的組成部分進行導入和編輯，可以在不同場景中共享使用。 \n \n 2. 在CoppeliaSim scene中，何謂clean model? \n 在CoppeliaSim中，"clean model" 通常指的是優化模型的過程，通過這個過程可以減少模型中無用的物件和多餘的細節，從而提高模擬的效率。 \n 具體來說，進行模型優化可以通過以下步驟完成： \n \n \n 刪除多餘的物體：在模型中刪除一些不必要的物體或場景，這些物體可能是你在建模時添加的一些細節，但對整個模型的性能並沒有太大的貢獻。 \n \n \n 合併網格：網格是模型中的一些基本元素，當模型中存在過多的網格時，模型的渲染和運行速度就會變慢。因此，可以將一些相似的網格合併在一起，從而減少網格的數量。 \n \n \n 簡化細節：當模型中存在過多的細節時，會使模擬變得非常緩慢。因此，可以將一些不必要的細節簡化或者刪除，從而提高模擬的效率。 \n \n \n 簡單來說，通過進行模型優化可以使CoppeliaSim的運行速度更快，從而更加有效地進行模擬和測試。 \n 3. 如何在CoppeliaSim中，利用Lua以及Python建立primitive type object，並利用程式設定物件位置? \n 以下是Lua語言範例: \n -- 創建立方體並設定位置 cubeHandle = sim.createPureShape(1, 3, {0.1, 0.1, 0.1}, 0.1) sim.setObjectPosition(cubeHandle, -1, {0, 0, 0.5}) \n 以下python語言範例: \n # 導入sim模塊 import sim \n # 創建立方體並設定位置 cubeHandle = sim.simCreatePureShape(1, 3, [0.1, 0.1, 0.1], 0.1) sim.simSetObjectPosition(cubeHandle, -1, [0, 0, 0.5]) \n 4. CoppeliaSim.ttt檔案格式與.simscene.xml檔案格式有何不同? \n CoppeliaSim中的場景文件有兩種格式：.ttt和.simscene.xml。這兩種格式的主要區別在於它們的內容和用途不同。 \n .ttt格式是CoppeliaSim自有的文件格式，它是一個二進制文件，包含了所有場景、對象和設置的信息。這種格式可以通過CoppeliaSim的GUI界面直接打開和編輯，也可以通過Lua腳本編程方式創建、編輯和保存。.ttt格式具有以下特點： \n \n 包含完整的場景、對象和設置的信息； \n 可以包含Lua腳本代碼和編程接口； \n 支持多種版本的CoppeliaSim； \n 不能通過文本編輯器直接查看和編輯。 \n \n .simscene.xml格式則是一種通用的XML文件格式，其中包含了CoppeliaSim場景的描述信息。這種格式可以通過文本編輯器或者其他XML編輯器進行編輯，也可以通過Python等腳本語言讀取和編輯。.simscene.xml格式具有以下特點： \n \n 是一種通用的XML文件格式； \n 可以通過文本編輯器或者其他XML編輯器進行編輯； \n 不包含Lua腳本代碼和編程接口； \n 可以被其他模擬軟件讀取和使用。 \n \n 總的來說，.ttt格式更適合在CoppeliaSim中進行場景的創建和編輯，而.simscene.xml格式則更適合與其他軟件進行數據交換和共享。 \n', 'tags': '', 'url': '問題.html'}, {'title': '程式講解', 'text': '首先這是一個Lua語言，在CoppeliaSim仿真環境中運行。該腳本定義了兩個函數： sysCall_init 和 sysCall_vision 。 \n sysCall_init函數是仿真環境初始化時自動調用的函數，該函數目前是空的，即不執行任何操作。 \n sysCall_vision函數是CoppeliaSim的視覺模組塊（Vision Module）在每次運行時會調用的函數，該函數的作用是對視覺傳感器的圖像進行邊緣檢測（edge detection）。具體來說，函數中的三個函數調用分別為： \n \n simVision.sensorImgToWorkImg(inData.handle) ：將視覺傳感器的圖像複製到工作圖像中； \n simVision.edgeDetectionOnWorkImg(inData.handle,0.2) ：對工作圖像進行邊緣檢測，檢測閾值為0.2； \n simVision.workImgToSensorImg(inData.handle) ：將處理後的工作圖像複製回視覺傳感器的圖像緩衝區中。 \n \n 其中，inData是一個包含了視覺模組塊的一些信息的table對象，例如handle（視覺傳感器的句柄）等。simVision是CoppeliaSim中提供的用於處理視覺相關任務的庫。 \n \n \n function   speedChange_callback(ui,id,newVal)  speed=minMaxSpeed[1]+(minMaxSpeed[2]-minMaxSpeed[1])*newVal/100 end \n 這個函數會在使用者調整了速度控制UI元素後被呼叫。它接收3個參數： ui ，這是UI元素的句柄； id ，這是UI元素的ID； newVal ，這是UI元素的新值。函數會根據新值計算出一個速度值 speed 。 \n function   sysCall_init() \n 這個函數是模擬程式的初始化函數，它只會被執行一次，當模擬程式啟動時。這個函數主要是執行一些初始化設置，例如設置模型的基礎物體、感測器和控制器，以及創建一些繪圖對象和UI元素。 \n bubbleRobBase=sim.getObject(\'.\') \n 這行代碼會獲取模型的根物體的句柄。在這個例子中，模型的根物體是代表機器人的物體。 \n leftMotor=sim.getObject ( "./leftMotor" ) rightMotor=sim.getObject ( "./rightMotor" ) noseSensor=sim.getObject ( "./sensingNose" ) \n 這些行會獲取左右馬達和前方感測器的句柄。這些句柄會在後續的代碼中用於控制馬達和讀取感測器。 \n minMaxSpeed={50*math.pi/180,300*math.pi/180} \n 這行會定義最小和最大速度。在這個例子中，速度是以弧度每秒為單位表示的，最小速度為50度每秒，最大速度為300度每秒。 \n backUntilTime=-1 \n 這行代碼定義了一個變數 backUntilTime ，用於在後續的代碼中區分機器人是向前移動還是向後移動。 \n robotCollection=sim.createCollection(0) sim.addItemToCollection(robotCollection,sim.handle_tree,bubbleRobBase,0) \n 這些行代碼用於創建一個物體集合並將機器人物體添加到其中。這將使得感測器能夠檢測到機器人周圍的其他物 \n function sysCall_actuation()： \n 這個函數控制BubbleRob的行動。它首先讀取接近傳感器的數據，以檢測是否有東西在BubbleRob的前方。如果傳感器檢測到障礙物，則將backUntilTime設置為當前仿真時間加上4秒，表示BubbleRob現在處於倒車模式。否則，如果backUntilTime小於當前仿真時間，則BubbleRob處於前進模式，並且將左右馬達的目標速度設置為speed。否則，BubbleRob處於倒車模式，並且左右馬達的目標速度設置為一定的值，以實現向後行駛的效果。 \n function sysCall_cleanup()： \n 這個函數在仿真結束時被調用，以清理代碼中使用的任何資源。在這個例子中，它摧毀了UI對象，以避免內存洩漏。', 'tags': '', 'url': '程式講解.html'}]};